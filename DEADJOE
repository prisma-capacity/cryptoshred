
*** These modified files were found in JOE when it aborted on Fri Feb 28 18:54:18 2020
*** JOE was aborted by UNIX signal 15

*** File 'README.md'
<hr />
<div align="right">
<a href="https://www.prisma-capacity.eu/careers#job-offers"><img
align="bottom" alt="PRISMA European Capacity Platform GmbH" class="inline"
src="prisma.png"
/></a>
</div>




# cryptoshred

![Java CI](https://github.com/prisma-capacity/cryptoshred/workflows/Java%20CI/badge.svg?branch=master)
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/333bfd567a6a447895212994b414f077)](https://app.codacy.com/gh/prisma-capacity/cryptoshred?utm_source=github.com&utm_medium=referral&utm_content=prisma-capacity/cryptoshred&utm_campaign=Badge_Grade_Settings)
[![codecov](https://codecov.io/gh/prisma-capacity/cryptoshred/branch/master/graph/badge.svg)](https://codecov.io/gh/prisma-capacity/cryptoshred)
[![MavenCentral](https://img.shields.io/maven-central/v/eu.prismacapacity/cryptoshred/0.0.1-M1.svg)](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22eu.prismacapacity%22)
<a href="https://www.apache.org/licenses/LICENSE-2.0">
    <img class="inline" src="https://img.shields.io/badge/license-ASL2-green.svg?style=flat">
</a>
[![Dependabot Status](https://api.dependabot.com/badges/status?host=github&repo=prisma-capacity/cryptoshred)](https://dependabot.com)


### Motivation

Cryptoshredding is a well-known technique to 'erase' encrypted data by throwing away the key necessary for decryption. 
Two out of numerous advantages are

* You do not have to actually remove (or update) data, so that it can be immutable
* You don't have to keep track of where it is used, as long as it stays encrypted

see https://en.wikipedia.org/wiki/Crypto-shredding

### cryptoshred library

In order to make use of that technique, you need to encrypt data before writing in the first place and maintain keys for the subjects. This is what cryptoshred can do for you.

#### Features

* Pluggable Metrics interface
  * optional Micrometer impl.
* Pluggable CryptoEngine
  * JDK-based impl.
* Pluggable Key Repository
  * optional Amazon DynamoDB impl.
* optional Spring-Boot autoconfiguration module
* optional Spring (not Boot) configuration module
* Jackson based deserialization to Java Objects
* Evolutionary approach to key definition creation and migration

### Encryption

In order to encrypt a particular piece of data, you use a 'CryptoContainerFactory' to wrap a CryptoContainer around the actual data before persisting.

```java
@Data
public class Person { // might be an Enitity, a POJO you serialize or anything you want to persist
  int age;
  CryptoContainer<String> name;
}
```
Of course, in order to wrap the data (and encrypt it, you'd need to provide a 'CryptoSubjectId', that references the actual key, that you'd want to throw away in order to do the 'deletion' afterwards)

```java
CryptoContainerFactory factory = ... // maybe injected from Spring or similar
CryptoSubjectId id = CryptoSubjectId.of(UUID.randomUUID()); // simple value object

Person p = new Person();
p.name = factory.wrap("Peter", id);
p.age = 30;

// go persist the Person
```
A CryptoContainer consists of the following data:

* SubjectId (which is associated to the actual key used for en/de-cryption)
* Algorith used
* KeySize used
* Type of Object // String in this example
* Encoded byte array of the serialized form of the Object wrapped.

You can wrap any Jackson-serializable object like for instance

```java
CryptoKeyRepository repo = new InMemCryptoKeyRepository(engine); // don't do this at home
CryptoObjectMapper om = CryptoObjectMapper.builder(repo, engine)
	.defaultKeySize(CryptoKeySize.of(256)) // optional
	.defaultAlgo(CryptoAlgorithm.AES_CBC)  // optional
	.build();

CryptoContainerFactory factory = om; 	// maybe injected from Spring or similar
					// actually implemented by CryptoObjectMapper

CryptoSubjectId id = CryptoSubjectId.of(UUID.randomUUID()); // simple value object, you would want to use a userId for that, and not a silly random.

Person p = new Person();
p.name = factory.wrap("Peter", id);
p.age = 30;
p.credicard = factory.wrap(new CreditCardInfo("12341234",CrediCardTypes.VISA));
// go persist the Person
```

### Decryption

When using CryptoObjectMapper to deserialize a 'CryptoContainer', all necessary dependencies are injected into the Container automatically, so you can use the 'CryptoContainer' just like an Optional (it copied all the methods from 'java.util.Optional').

```java

String json = om.writeValueAsString(p);

Person p2 = om.readValue(json, Person.class);
assertTrue(p2.name.isPresent());
assertEquals("Peter",p2.name.get());

// if you deleted the key in between, name.isPresent() would be false.
// of course you should rather use p2.name.orElse("unknown") or something rather than get, but you know all that from 
```
<hr />
<div align="right">
<a href="https://www.prisma-capacity.eu/careers#job-offers"><img
align="bottom" alt="PRISMA European Capacity Platform GmbH" class="inline"
src="prisma.png"
/></a>
</div>




*** File '(Unnamed)'
assertj
assertj
assert
vali
plugin-plugin
plugin
plugin-
-plugin
spotl
owasp

*** File '(Unnamed)'
registry/Organisation/ShipperAdminUpgraded/versions/1/schema.json
registry/Organisation/ShipperAdminUpgraded/versions/1/schema.json
registry/Organisation/ShipperAdminUpgraded/versions/1/examples/simple.json
/home/uwe/work/workspaces/github/factcast/.git/MERGE_MSG
/home/uwe/work/workspaces/github/factcast/.git/MERGE_MSG
factcast-site/documentation/release.sh
pom.xml
/home/uwe/work/workspaces/github/cryptoshred/.git/MERGE_MSG
README.md
README.md
README.md

*** File '* Startup Log *'
Processing '/etc/joe/joerc'...
Processing '/etc/joe/ftyperc'...
Finished processing /etc/joe/ftyperc
Finished processing /etc/joe/joerc
